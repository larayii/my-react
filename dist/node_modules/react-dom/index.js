(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
    typeof define === 'function' && define.amd ? define(['react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

    function _interopNamespaceDefault(e) {
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n.default = e;
        return Object.freeze(n);
    }

    var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

    const FunctionComponent = 0;
    // 根节点
    const HostRoot = 3;
    // <div></div>
    const HostComponent = 5;
    // <div>123</div>
    const HostText = 6;

    const NoFlags = 0b0000000;
    const Placement = 0b0000001;
    const Update = 0b0000010;
    const ChildDeletion = 0b0000100;
    const MutationMask = Placement | Update | ChildDeletion;

    class FiberNode {
        type;
        tag;
        pendingProps;
        key;
        stateNode;
        ref;
        return;
        sibling;
        child;
        index;
        memoizedProps;
        memoizedState;
        alternate;
        flags;
        subtreeFlags;
        updateQueue;
        constructor(tag, pendingProps, key) {
            // 实例
            this.tag = tag;
            this.key = key;
            // HostComponent <div> div DOM
            this.stateNode = null;
            // FunctionComponent () => {}
            this.type = null;
            // 构成树状结构
            this.return = null;
            this.sibling = null;
            this.child = null;
            this.index = 0;
            this.ref = null;
            // 作为工作单元
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.memoizedState = null;
            this.updateQueue = null;
            this.alternate = null;
            // 副作用
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
        }
    }
    class FiberRootNode {
        container;
        current;
        finishedWork;
        constructor(container, hostRootFiber) {
            this.container = container; // 挂载的原生宿主环境节点
            this.current = hostRootFiber;
            hostRootFiber.stateNode = this;
            this.finishedWork = null;
        }
    }
    const createWorkInProgress = (current, pendingProps) => {
        let wip = current.alternate;
        if (wip === null) {
            // mount 首屏渲染
            wip = new FiberNode(current.tag, pendingProps, current.key);
            wip.stateNode = current.stateNode;
            wip.alternate = current;
            current.alternate = wip;
        }
        else {
            // update
            wip.pendingProps = pendingProps;
            wip.flags = NoFlags;
            wip.subtreeFlags = NoFlags;
        }
        wip.type = current.type;
        wip.updateQueue = current.updateQueue;
        wip.child = current.child;
        wip.memoizedProps = current.memoizedProps;
        wip.memoizedState = current.memoizedState;
        return wip;
    };
    function createFiberFromElement(element) {
        const { type, key, props } = element;
        let fiberTag = FunctionComponent;
        if (typeof type === 'string') {
            // <div/> type: 'div'
            fiberTag = HostComponent;
        }
        else if (typeof type !== 'function' && true) {
            console.warn('为定义的type类型', element);
        }
        const fiber = new FiberNode(fiberTag, props, key);
        fiber.type = type;
        return fiber;
    }

    // update实例化方法
    const createUpdate = (action) => {
        return {
            action
        };
    };
    // updateQueue实例化方法
    const createUpdateQueue = () => {
        return {
            shared: {
                pending: null
            },
            dispatch: null
        };
    };
    // 将update插入updateQueue方法
    const enqueueUpdate = (updateQueue, update) => {
        updateQueue.shared.pending = update;
    };
    // 消费update的方法
    const processUpdateQueue = (baseState, //初始的状态
    pendingUpdate // 要消费的update
    ) => {
        const result = {
            memoizedState: baseState
        };
        if (pendingUpdate !== null) {
            const action = pendingUpdate.action;
            if (action instanceof Function) {
                // baseState 1 update (x) => 4x -> memoizedState 4
                result.memoizedState = action(baseState);
            }
            else {
                // baseState 1 update 2 -> memoizedState 2
                result.memoizedState = action;
            }
        }
        return result;
    };

    const supportSymbol = typeof Symbol === "function" && Symbol.for;
    const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for("react.element") : 0xeac7;

    function ChildReconciler(shouldTrackEffects) {
        function reconcileSingleElement(returnFiber, currentFiber, element) {
            // 根据element创建fiber
            const fiber = createFiberFromElement(element);
            fiber.return = returnFiber;
            return fiber;
        }
        function reconcileSingleTextNode(returnFiber, currentFiber, content) {
            const fiber = new FiberNode(HostText, { content }, null);
            fiber.return = returnFiber;
            return fiber;
        }
        function placeSingleChild(fiber) {
            // true并首屏渲染时（fiber.curren(alternate) == null）才标记副作用flags
            if (shouldTrackEffects && fiber.alternate === null) {
                fiber.flags |= Placement;
            }
            return fiber;
        }
        return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
            // 判断当前fiber的类型
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                    default:
                        {
                            console.warn('未实现的reconcile类型', newChild);
                        }
                        break;
                }
            }
            // TODO 多节点的情况 ul> li*3
            // HostText
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
            }
            {
                console.warn('未实现的reconcile类型', newChild);
            }
            return null;
        };
    }
    const reconcileChildFibers = ChildReconciler(true);
    const mountChildFibers = ChildReconciler(false);

    const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    let currentlyRenderingFiber = null;
    let workInProgressHook = null;
    const { currentDispatcher } = internals;
    function renderWithHooks(wip) {
        // 赋值操作
        currentlyRenderingFiber = wip;
        // 重置
        wip.memoizedState = null;
        const current = wip.alternate;
        if (current !== null) ;
        else {
            // mount
            currentDispatcher.current = HooksDispatcherOnMount;
        }
        const Component = wip.type;
        const props = wip.pendingProps;
        const children = Component(props);
        // 重置操作
        currentlyRenderingFiber = null;
        return children;
    }
    const HooksDispatcherOnMount = {
        useState: mountState
    };
    // 不能在hooks里执行hooks的原因：
    // hooks上下文中,保存这样的集合
    //  currentDispatcher.current = { 
    //     useState() {throw new Error("xxx")}
    //  }
    // function App (){
    //     useEffect(() => {
    //         useState()
    //     })
    // }
    // 第一个useEffect中的currentDispatcher.current = HooksDispatcherOnMount/HooksDispatcherOnUpdate，
    // 在useEffect回调执行中currentDispatcher.current的指向是实现对应函数的集合
    function mountState(initialState) {
        // 找到当前useState对应的hook数据
        const hook = mountWorkInProgresHook();
        let memoizedState;
        if (initialState instanceof Function) {
            memoizedState = initialState();
        }
        else {
            memoizedState = initialState;
        }
        const queue = createUpdateQueue();
        hook.updateQueue = queue;
        hook.memoizedState = memoizedState;
        // @ts-ignore
        const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
        queue.dispatch = dispatch;
        return [memoizedState, dispatch];
    }
    function dispatchSetState(fiber, updateQueue, action) {
        const update = createUpdate(action);
        enqueueUpdate(updateQueue, update);
        scheduleUpdateOnFiber(fiber);
    }
    function mountWorkInProgresHook() {
        const hook = {
            memoizedState: null,
            updateQueue: null,
            next: null
        };
        if (workInProgressHook === null) {
            // mount时 第一个hook
            if (currentlyRenderingFiber === null) {
                throw new Error('请在函数组件内调用hook');
            }
            else {
                workInProgressHook = hook;
                currentlyRenderingFiber.memoizedState = workInProgressHook;
            }
        }
        else {
            // mount时 后续的hook
            workInProgressHook.next = hook;
            workInProgressHook = hook;
        }
        return workInProgressHook;
    }

    // 递归中的递阶段
    const beginWork = (wip) => {
        // 比较，返回子fiberNode
        switch (wip.tag) {
            case HostRoot:
                return updateHostRoot(wip);
            case HostComponent:
                return updateHostComponent(wip);
            case HostText:
                return null;
            case FunctionComponent:
                return updateFunctionComponent(wip);
            default:
                {
                    console.warn('beginWork未实现的类型');
                }
                break;
        }
        return null;
    };
    function updateFunctionComponent(wip) {
        const nextChildren = renderWithHooks(wip);
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateHostRoot(wip) {
        const baseState = wip.memoizedState;
        const updateQueue = wip.updateQueue;
        const pending = updateQueue.shared.pending;
        updateQueue.shared.pending = null;
        const { memoizedState } = processUpdateQueue(baseState, pending);
        wip.memoizedState = memoizedState;
        const nextChildren = wip.memoizedState;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function updateHostComponent(wip) {
        const nextProps = wip.pendingProps;
        const nextChildren = nextProps.children;
        reconcileChildren(wip, nextChildren);
        return wip.child;
    }
    function reconcileChildren(wip, children) {
        const current = wip.alternate;
        if (current !== null) {
            // update
            wip.child = reconcileChildFibers(wip, current?.child, children);
        }
        else {
            // mount
            wip.child = mountChildFibers(wip, null, children);
        }
    }

    const createInstance = (type) => {
        // TODO 处理props
        const element = document.createElement(type);
        return element;
    };
    const appendInitialChild = (parent, child) => {
        parent.appendChild(child);
    };
    const createTextInstance = (content) => {
        return document.createTextNode(content);
    };
    const appendChildToContainer = appendInitialChild;

    const completeWork = (wip) => {
        // 递归中的归
        const newProps = wip.pendingProps;
        const current = wip.alternate;
        switch (wip.tag) {
            case HostComponent:
                if (current !== null && wip.stateNode) ;
                else {
                    // 1. 构建DOM,宿主环境的实例，浏览器环境中是dom节点
                    // const instance = createInstance(wip.type, newProps);
                    const instance = createInstance(wip.type);
                    // 2. 将DOM插入到DOM树中
                    appendAllChildren(instance, wip);
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                return null;
            case HostText:
                if (current !== null && wip.stateNode) ;
                else {
                    // 1. 构建DOM
                    const instance = createTextInstance(newProps.content);
                    wip.stateNode = instance;
                }
                bubbleProperties(wip);
                return null;
            case HostRoot:
                bubbleProperties(wip);
                return null;
            case FunctionComponent:
                bubbleProperties(wip);
                return null;
            default:
                {
                    console.warn('未处理的completeWork情况', wip);
                }
                break;
        }
    };
    function appendAllChildren(parent, wip) {
        let node = wip.child;
        while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node?.stateNode);
            }
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === wip) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === wip) {
                    return;
                }
                node = node?.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function bubbleProperties(wip) {
        let subtreeFlags = NoFlags;
        let child = wip.child;
        while (child !== null) {
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            child.return = wip;
            child = child.sibling;
        }
        wip.subtreeFlags |= subtreeFlags;
    }

    let nextEffect = null;
    const commitMutationEffects = (finishedWork) => {
        nextEffect = finishedWork;
        while (nextEffect !== null) {
            // 向下遍历
            const child = nextEffect.child;
            if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
                child !== null) {
                nextEffect = child;
            }
            else {
                // 向上遍历 DFS
                up: while (nextEffect !== null) {
                    commitMutaitonEffectsOnFiber(nextEffect);
                    const sibling = nextEffect.sibling;
                    if (sibling !== null) {
                        nextEffect = sibling;
                        break up;
                    }
                    nextEffect = nextEffect.return;
                }
            }
        }
    };
    const commitMutaitonEffectsOnFiber = (finishedWork) => {
        const flags = finishedWork.flags;
        if ((flags & Placement) !== NoFlags) {
            commitPlacement(finishedWork);
            // 将placement从flags中移除
            finishedWork.flags &= ~Placement;
        }
        // flags Update
        // flags ChildDeletion
    };
    const commitPlacement = (finishedWork) => {
        {
            console.warn('执行Placement操作', finishedWork);
        }
        // parent DOM
        const hostParent = getHostParent(finishedWork);
        // finishedWork ~~ DOM append parent DOM
        if (hostParent !== null) {
            appendPlacementNodeIntoContainer(finishedWork, hostParent);
        }
    };
    // Host宿主环境的意思
    function getHostParent(fiber) {
        let parent = fiber.return;
        while (parent) {
            const parentTag = parent.tag;
            // HostComponent HostRoot
            if (parentTag === HostComponent) {
                return parent.stateNode;
            }
            if (parentTag === HostRoot) {
                return parent.stateNode.container;
            }
            parent = parent.return;
        }
        {
            console.warn('未找到host parent');
        }
        return null;
    }
    function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
        // fiber host
        if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
            appendChildToContainer(hostParent, finishedWork.stateNode);
            return;
        }
        const child = finishedWork.child;
        if (child !== null) {
            appendPlacementNodeIntoContainer(child, hostParent);
            let sibling = child.sibling;
            while (sibling !== null) {
                appendPlacementNodeIntoContainer(sibling, hostParent);
                sibling = sibling.sibling;
            }
        }
    }

    let workInProgress = null; // 全局指针，指向正在工作的FiberNode
    function prepareFreshStack(root) {
        workInProgress = createWorkInProgress(root.current, {});
    }
    function scheduleUpdateOnFiber(fiber) {
        // TODO 调度功能
        // fiberRootNode
        const root = markUpdateFromFiberToRoot(fiber);
        renderRoot(root);
    }
    // 从当前fiber遍历到fiberRootNode
    function markUpdateFromFiberToRoot(fiber) {
        let node = fiber;
        let parent = node.return;
        while (parent !== null) {
            node = parent;
            parent = node.return;
        }
        if (node.tag === HostRoot) {
            return node.stateNode;
        }
        return null;
    }
    function renderRoot(root) {
        // 初始化
        prepareFreshStack(root);
        do {
            try {
                workLoop();
                break;
            }
            catch (e) {
                {
                    console.warn('workLoop发生错误', e);
                }
                workInProgress = null;
            }
        } while (true);
        // root是fiberRootNode，.current是hostRootFiber
        // alternate是createWorkInProgress执行时创建的hostRootFiber对应的workInProgress（fiber）
        // 当前这颗hostRootFiber下面已经生成一颗完整的workInProgress的fiber树，树中包含placement标记
        const finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        // wip fiberNode树 树中的flags
        commitRoot(root);
    }
    function commitRoot(root) {
        const finishedWork = root.finishedWork;
        if (finishedWork === null) {
            return;
        }
        {
            console.warn('commit阶段开始', finishedWork);
        }
        // 重置
        root.finishedWork = null;
        // 判断是否存在3个子阶段需要执行的操作
        // root flags root subtreeFlags
        const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
        const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
        if (subtreeHasEffect || rootHasEffect) {
            // beforeMutation
            // mutation Placement
            commitMutationEffects(finishedWork);
            root.current = finishedWork;
            // layout
        }
        else {
            root.current = finishedWork;
        }
    }
    function workLoop() {
        while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
        }
    }
    function performUnitOfWork(fiber) {
        const next = beginWork(fiber);
        fiber.memoizedProps = fiber.pendingProps;
        if (next === null) {
            completeUnitOfWork(fiber);
        }
        else {
            workInProgress = next;
        }
    }
    function completeUnitOfWork(fiber) {
        let node = fiber;
        do {
            completeWork(node);
            const sibling = node.sibling;
            if (sibling !== null) {
                workInProgress = sibling;
                return;
            }
            node = node.return;
            workInProgress = node;
        } while (node !== null);
    }

    // ReactDOM.createRoot(rootElement).render(<App/>) createRoot()调用时触发
    function createContainer(container) {
        const hostRootFiber = new FiberNode(HostRoot, {}, null);
        const root = new FiberRootNode(container, hostRootFiber);
        hostRootFiber.updateQueue = createUpdateQueue();
        return root;
    }
    // reader()调用时触发
    function updateContainer(element, root) {
        const hostRootFiber = root.current;
        const update = createUpdate(element);
        enqueueUpdate(hostRootFiber.updateQueue, update);
        scheduleUpdateOnFiber(hostRootFiber);
        return element;
    }

    // ReactDOM.createRoot(root).render(<App/>)
    function createRoot(container) {
        const root = createContainer(container);
        return {
            render(element) {
                return updateContainer(element, root);
            }
        };
    }

    var ReactDOM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createRoot: createRoot
    });

    return ReactDOM;

}));
